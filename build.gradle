/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'PatO' at '6/18/15 1:29 AM' with Gradle 2.2.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.2.1/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'de.undercouch:gradle-download-task:1.2'
    }
}

// Apply download driver plugin
apply plugin: 'de.undercouch.download'


// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the idea plugin to add support for Idea
apply plugin: 'idea'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.7'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile group: 'junit', name: 'junit', version: '4.11'
    compile 'junit:junit:4.12'
    compile 'org.seleniumhq.selenium:selenium-java:2.46.0'
    compile 'org.testng:testng:6.9.4'

    testCompile 'org.testng:testng:6.8.1'
}

    task downloadDrivers(type: Copy) {
        File drivers = new File('./drivers')
        drivers.mkdirs()

        if(browser == "Chrome") {
            download {
                src 'http://chromedriver.storage.googleapis.com/2.15/chromedriver_win32.zip'
                dest drivers
                onlyIfNewer true
            }
        }
        else if(browser == "IE") {

            download {
                src 'http://selenium.googlecode.com/files/IEDriverServer_x64_2.28.0.zip'
                dest drivers
                onlyIfNewer true
            }
        }

        file(drivers).listFiles().each {
            artifact ->
                if (artifact.name.endsWith('.zip')) {
                    from zipTree(artifact)
                    into drivers
                }
        }
    }

    if(browser!="Firefox"){
        downloadDrivers.execute()
    }

task runJUnitTestCases(type: Test) {
    testLogging {
        events "started", "passed", "failed"
    }

    include suites

    systemProperties.put('primaryUserName', primaryUserName)
    systemProperties.put('primaryUserPassword', primaryUserPassword)
    systemProperties.put('browser', browser)

    }

//task runTestNGTestCases(type: Test) {
//
//    useTestNG()
//
//    testLogging {
//        events "started", "passed", "failed", "skipped"
//    }
//
//    File[] suitesFiles = splitSuites(suites)
//    options {
//        suites(suitesFiles)
//        includeGroups(groups)
//    }
//
//    systemProperties.put('primaryUserName', primaryUserName)
//    systemProperties.put('primaryUserPassword', primaryUserPassword)
//    systemProperties.put('browser', browser)
//
//    println browser
//
//}

//Method to split suites if they are added with commas through command line
def File[] splitSuites(String suites) {
    String[] listSuites = suites.split(",")
    int counter = 0
    File[] suitesFiles = new File[listSuites.length]

    listSuites.each { String item ->
        suitesFiles[counter] = new File(suitePath + item.trim())
        counter++
    }
    return suitesFiles
}

