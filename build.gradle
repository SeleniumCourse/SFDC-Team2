/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'PatO' at '6/18/15 1:29 AM' with Gradle 2.2.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.2.1/userguide/tutorial_java_projects.html
 */

//buildscript {
//    repositories {
//        jcenter()
//    }
//    dependencies {
//        classpath 'de.undercouch:gradle-download-task:1.2'
//    }
//}

// Apply download driver plugin
//apply plugin: 'de.undercouch.download'

// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the idea plugin to add support for Idea
apply plugin: 'idea'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.7'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    compile 'org.testng:testng:6.9.6'

    compile 'com.github.detro:phantomjsdriver:1.2.0'

    compile 'org.seleniumhq.selenium:selenium-java:2.46.0'

    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'org.slf4j:slf4j-simple:1.7.12'
    compile 'jexcelapi:jxl:2.4.2'
    compile 'com.googlecode.json-simple:json-simple:1.1.1'
    compile 'velocity:velocity-dep:+'
    compile 'org.uncommons:reportng:+'
    compile 'com.google.inject:guice:3.0'
    compile 'org.uncommons:reportng:1.1.3'


}

task downloadDrivers(type: Copy) {
    File drivers = new File('./drivers')
    drivers.mkdirs()

    if (browser == "Chrome") {
        download {
            src 'http://chromedriver.storage.googleapis.com/2.15/chromedriver_win32.zip'
            dest drivers
            onlyIfNewer true
        }
    } else if (browser == "IE") {

        download {
            src 'http://selenium.googlecode.com/files/IEDriverServer_x64_2.28.0.zip'
            dest drivers
            onlyIfNewer true
        }
    }

    file(drivers).listFiles().each {
        artifact ->
            if (artifact.name.endsWith('.zip')) {
                from zipTree(artifact)
                into drivers
            }
    }
}

if (browser != "Firefox") {
    downloadDrivers.execute()
}

task runTestNGTestCases(type: Test) {

    useTestNG()

    options {

        useDefaultListeners = false

        suites('src/test/resources/Suite.xml')
        listeners << 'org.uncommons.reportng.HTMLReporter'
        listeners << 'org.uncommons.reportng.JUnitXMLReporter'
        listeners << 'utils.ReportNGListener'
    }
    reports.html.enabled = true

    reports.junitXml.destination = 'reports'
    reports.html.destination = 'reports'

    systemProperties.put('primaryUserName', primaryUserName)
    systemProperties.put('primaryUserPassword', primaryUserPassword)
    systemProperties.put('browser', browser)
    systemProperties.put('mode', mode)
    systemProperties.put('userName', userName)
    systemProperties.put('key', key)
    systemProperties.put('remoteBrowser', remoteBrowser)
    systemProperties.put('remotePlatform', remotePlatform)
    systemProperties.put('remoteVersion', remoteVersion)
}

//Method to split suites if they are added with commas through command line
def File[] splitSuites(String suites) {
    String[] listSuites = suites.split(",")
    int counter = 0
    File[] suitesFiles = new File[listSuites.length]

    listSuites.each { String item ->
        suitesFiles[counter] = new File(suitePath + item.trim())
        counter++
    }
    return suitesFiles
}

